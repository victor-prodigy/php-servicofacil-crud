<?php
// üìù CRIAR NOVA SOLICITA√á√ÉO DE SERVI√áO - Clean Code
session_start();
require_once '../conexao.php';

// üîí Verificar se o usu√°rio est√° logado e √© um cliente
if (!isset($_SESSION['cliente_id']) || $_SESSION['usuario_tipo'] !== 'cliente') {
    enviarResposta(false, "Acesso n√£o autorizado");
}

// üìù Fun√ß√£o para validar dados do servi√ßo
function validarDadosServico($dados)
{
    $erros = [];

    if (empty($dados['titulo']) || strlen($dados['titulo']) < 5) {
        $erros[] = "T√≠tulo deve ter pelo menos 5 caracteres";
    }

    if (empty($dados['descricao']) || strlen($dados['descricao']) < 10) {
        $erros[] = "Descri√ß√£o deve ter pelo menos 10 caracteres";
    }

    if (empty($dados['categoria'])) {
        $erros[] = "Categoria √© obrigat√≥ria";
    }

    if (empty($dados['localizacao'])) {
        $erros[] = "Localiza√ß√£o √© obrigat√≥ria";
    }

    if (!empty($dados['orcamento']) && !is_numeric($dados['orcamento'])) {
        $erros[] = "Or√ßamento deve ser um valor num√©rico";
    }

    return $erros;
}

// üì§ Fun√ß√£o para enviar resposta
function enviarResposta($success, $message, $data = [])
{
    header('Content-Type: application/json');
    $resposta = [
        'success' => $success,
        'message' => $message
    ];

    if (!empty($data)) {
        $resposta = array_merge($resposta, $data);
    }

    echo json_encode($resposta);
    exit;
}

// üöÄ PROCESSO PRINCIPAL
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    try {
        // üìã Coleta de dados
        $dados = [
            'titulo' => $_POST['titulo'] ?? '',
            'descricao' => $_POST['descricao'] ?? '',
            'categoria' => $_POST['categoria'] ?? '',
            'orcamento' => $_POST['orcamento'] ?? null,
            'prazo' => $_POST['prazo'] ?? null,
            'localizacao' => $_POST['localizacao'] ?? ''
        ];

        // ‚úÖ Valida√ß√£o
        $erros = validarDadosServico($dados);
        if (!empty($erros)) {
            enviarResposta(false, implode(', ', $erros));
        }

        // üíæ Preparar dados para inser√ß√£o
        $cliente_id = $_SESSION['cliente_id'];
        $orcamento = !empty($dados['orcamento']) ? floatval($dados['orcamento']) : null;
        $prazo = !empty($dados['prazo']) ? $dados['prazo'] : null;

        // üèóÔ∏è Inserir no banco
        $sql = "INSERT INTO servicos (cliente_id, titulo, descricao, categoria, orcamento, prazo, localizacao, status) 
                VALUES (?, ?, ?, ?, ?, ?, ?, 'aberto')";

        $stmt = $pdo->prepare($sql);
        $stmt->execute([
            $cliente_id,
            $dados['titulo'],
            $dados['descricao'],
            $dados['categoria'],
            $orcamento,
            $prazo,
            $dados['localizacao']
        ]);

        // ‚ú® Sucesso
        $servico_id = $pdo->lastInsertId();
        enviarResposta(true, "Solicita√ß√£o de servi√ßo criada com sucesso!", [
            'servico_id' => $servico_id
        ]);
    } catch (Exception $e) {
        enviarResposta(false, "Erro interno: " . $e->getMessage());
    }
} else {
    enviarResposta(false, "M√©todo n√£o permitido");
}
